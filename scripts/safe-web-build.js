const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

async function safeWebBuild() {
    try {
        console.log('üîß Iniciando build seguro para aplica√ß√£o web...');
        
        // 1. Gerar apenas o Prisma Client
        console.log('üì¶ Gerando Prisma Client...');
        await execAsync('npx prisma generate');
        console.log('‚úÖ Prisma Client gerado com sucesso');
        
        // 2. Build do Next.js
        console.log('üèóÔ∏è  Fazendo build do Next.js...');
        await execAsync('npx next build');
        console.log('‚úÖ Build do Next.js conclu√≠do com sucesso');
        
        console.log('üéâ Build seguro da web conclu√≠do com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro durante o build:', error.message);
        
        // Se falhar, tenta uma abordagem mais b√°sica
        console.log('üîÑ Tentando abordagem alternativa...');
        try {
            await execAsync('npx next build');
            console.log('‚úÖ Build alternativo bem-sucedido');
        } catch (fallbackError) {
            console.error('‚ùå Falha no build alternativo:', fallbackError.message);
            process.exit(1);
        }
    }
}

if (require.main === module) {
    safeWebBuild()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error('‚ùå Build falhou:', error);
            process.exit(1);
        });
}

module.exports = { safeWebBuild }; 